const qrcode = require('qrcode-terminal');
const { Client, Buttons, List, MessageMedia } = require('whatsapp-web.js');
const client = new Client();

client.on('qr', qr => {
    qrcode.generate(qr, {small: true});
});

client.on('ready', () => {
    console.log('WhatsApp conectado.‚úÖ');
});

client.initialize();

// Fun√ß√£o auxiliar para criar delay
const delay = ms => new Promise(res => setTimeout(res, ms));

// --- ESTADOS: Rastreia o progresso de cada usu√°rio ---
const greetedUsers = new Set(); // Recebeu a intro longa
const pendingConclusionUsers = new Set(); // Escolheu um cat√°logo e precisa decidir 9 ou 0
const completedUsers = new Set(); // Fluxo autom√°tico encerrado (atendimento manual)

// --- LINKS DOS CAT√ÅLOGOS ---
const LINKS = {
    TENIS: 'https://photos.app.goo.gl/xA8nvxRgWjWAn6sc6',
    ROUPAS: 'https://photos.app.goo.gl/1at15UGctEPiBsEx5',
    PERFUMARIA: 'https://photos.app.goo.gl/2YZYXgaSbnKKHDgd6'
};

// --- MENSAGENS E MENUS ---
const getMenuPrincipalMessage = () => `
*SERVI√áOS DISPON√çVEIS:*

Por favor, escolha uma das op√ß√µes abaixo:

1Ô∏è‚É£ - Cat√°logo de T√™nis
2Ô∏è‚É£ - Olhar Roupas
3Ô∏è‚É£ - Ver Perfumaria
`;

const getMenuConclusaoMessage = () => `
O cat√°logo foi enviado! O que voc√™ gostaria de fazer agora?

9Ô∏è‚É£ - Voltar ao Menu Principal
0Ô∏è‚É£ - Falar com um Atendente (Encerrar o autom√°tico)
`;

const getAtendimentoEncaminhadoMessage = (name) => `
*‚úÖ Atendimento Encaminhado:* √ìtimo ${name}!

Sua solicita√ß√£o j√° foi passada para um de nossos atendentes. Por favor, aguarde a resposta manual.
`;


// Vari√°vel para evitar o envio repetido da mensagem de conclus√£o
const reminderSent = new Set();

// Fun√ß√£o principal de tratamento de mensagens
client.on('message', async msg => {
    const chat = await msg.getChat();
    const body = msg.body.toLowerCase().trim();
    const userId = msg.from; // Identificador √∫nico do usu√°rio
    let name = '';

    // Tenta obter o nome do contato
    try {
        const contact = await msg.getContact();
        name = contact.pushname.split(" ")[0];
    } catch (e) {
        console.error("Erro ao obter contato, usando 'cliente'.", e);
        name = 'cliente';
    }

    // --- 0. FLUXO MANUAL/COMPLETADO (Bot em sil√™ncio) ---
    // Se o usu√°rio j√° concluiu (escolheu 0) e n√£o est√° tentando reiniciar o atendimento ('oi'),
    // o bot deve responder apenas uma vez para confirmar o encaminhamento.
    if (completedUsers.has(userId) && !body.match(/^(oi|ol√°|ola|dia|tarde|noite)$/i)) {
        
        // Se a mensagem de lembrete ainda n√£o foi enviada AP√ìS a conclus√£o (para mensagens subsequentes como "ok")
        if (!reminderSent.has(userId)) {
             await delay(1000);
             await chat.sendStateTyping();
             await client.sendMessage(msg.from, `*Aten√ß√£o:* Seu atendimento j√° est√° sendo cuidado manualmente. Por favor, aguarde o retorno do atendente.`);
             reminderSent.add(userId);
        }
        return; // ENCERRA o processamento autom√°tico
    }


    // --- 1. FLUXO DE CONCLUS√ÉO PENDENTE (Decis√£o: 9 ou 0) ---
    if (pendingConclusionUsers.has(userId)) {
        if (body === '0') {
            // A. Falar com Atendente (Encerrar Autom√°tico)
            await delay(2000);
            await chat.sendStateTyping();
            await client.sendMessage(msg.from, getAtendimentoEncaminhadoMessage(name));
            
            // Move para o estado final e limpa o estado intermedi√°rio
            completedUsers.add(userId);
            pendingConclusionUsers.delete(userId);
            reminderSent.delete(userId); // Limpa o lembrete para uma poss√≠vel reinicializa√ß√£o
            return;
        } 
        
        if (body === '9' || body === 'menu') {
            // B. Voltar ao Menu Principal
            await delay(1500);
            await chat.sendStateTyping();
            await client.sendMessage(msg.from, getMenuPrincipalMessage());
            
            // Remove do estado intermedi√°rio
            pendingConclusionUsers.delete(userId);
            return;
        } 
        
        // C. Resposta Inv√°lida no estado de Conclus√£o Pendente
        await delay(1000);
        await chat.sendStateTyping();
        await client.sendMessage(msg.from, 'Por favor, digite *9* para voltar ao Menu Principal ou *0* para chamar um atendente.');
        return; 
    }


    // --- 2. FLUXO DE IN√çCIO: Sauda√ß√£o + Menu (Gatilhos: oi, ol√°, dia, tarde, noite) ---
    if (body.match(/^(oi|ol√°|ola|dia|tarde|noite)$/i)) {
        
        // Se reiniciar, remove de estados de conclus√£o para que o funil funcione novamente.
        if (completedUsers.has(userId)) { completedUsers.delete(userId); }
        if (pendingConclusionUsers.has(userId)) { pendingConclusionUsers.delete(userId); }
        if (reminderSent.has(userId)) { reminderSent.delete(userId); }


        if (greetedUsers.has(userId)) {
            // Usu√°rio j√° saudado: Resposta simplificada
            await delay(1500);
            await chat.sendStateTyping();
            await client.sendMessage(msg.from, `Ol√° novamente, ${name}! Aqui est√£o nossas op√ß√µes:`);
        } else {
            // Primeira vez: Sequ√™ncia completa de boas-vindas
            await delay(3000);
            await chat.sendStateTyping();
            
            await client.sendMessage(msg.from, `Ol√°! ${name}, tudo bem? üòé`);

            await delay(3000);
            await chat.sendStateTyping();
            
            await client.sendMessage(msg.from, 'Com nossas cole√ß√µes, seu look ficar√° melhor.');

            await delay(3000);
            await chat.sendStateTyping();
            
            await client.sendMessage(msg.from, 
                `Conhe√ßa nosso Instagram e acesse os links para ver nosso cat√°logo!\n\n${'https://www.instagram.com/annashoestb'}`
            );
            
            greetedUsers.add(userId); // Marca o usu√°rio como saudado para o futuro
        }
        
        // Envia o menu em ambos os casos 
        await delay(3000);
        await chat.sendStateTyping();
        await client.sendMessage(msg.from, getMenuPrincipalMessage());

        return; // Termina a execu√ß√£o

    }

    // --- 3. FLUXO DE ESCOLHA DE CAT√ÅLOGO (Gatilhos: 1, 2, 3) ---

    let catalogMessage = '';
    let isCatalogChosen = false;
    
    // Op√ß√£o 1: Cat√°logo de T√™nis
    if (body === '1') {
        catalogMessage = `*üëü Cat√°logo de T√™nis*\n\nConfira nossa sele√ß√£o completa de modelos:\nüîó ${LINKS.TENIS}`;
        isCatalogChosen = true;
    } 
    // Op√ß√£o 2: Olhar Roupas
    else if (body === '2') {
        catalogMessage = `*üëïüëñ Olhar Roupas*\n\nExplore nossas cole√ß√µes de roupas masculinas e femininas:\nüîó ${LINKS.ROUPAS}`;
        isCatalogChosen = true;
    } 
    // Op√ß√£o 3: Ver Perfumaria
    else if (body === '3') {
        catalogMessage = `*üß¥ Ver Perfumaria*\n\nDescubra nossas fragr√¢ncias de luxo:\nüîó ${LINKS.PERFUMARIA}`;
        isCatalogChosen = true;
    }

    if (isCatalogChosen) {
        // Envia o cat√°logo
        await delay(2000);
        await chat.sendStateTyping();
        await client.sendMessage(msg.from, catalogMessage);

        // Envia o menu de conclus√£o
        await delay(3000);
        await chat.sendStateTyping();
        await client.sendMessage(msg.from, getMenuConclusaoMessage());
        
        // Move para o estado de conclus√£o pendente
        pendingConclusionUsers.add(userId);
        return;
    }
    
    // Op√ß√£o de Reexibir o Menu Principal (Gatilho: menu)
    else if (body === 'menu') {
        await delay(1500);
        await chat.sendStateTyping();
        await client.sendMessage(msg.from, getMenuPrincipalMessage());
    } 
    
    // Mensagem de Fallback (Se digitar algo que n√£o √© entendido)
    else {
        await delay(1000);
        await client.sendMessage(msg.from, 'Desculpe, n√£o entendi. Digite *MENU* para ver as op√ß√µes.');
    }
});
